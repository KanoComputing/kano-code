#!/usr/bin/env python

# make-apps
#
# Copyright (C) 2016 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# This scripts starts the server and opens the browser with Kano Code.
#

import os
import sys
import multiprocessing
import signal
import time
import atexit
import subprocess

from requests import post, RequestException

if __name__ == '__main__' and __package__ is None:
    DIR_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))

    if not DIR_PATH.startswith('/usr'):
        sys.path.insert(1, DIR_PATH)
        LOCALE_PATH = os.path.join(DIR_PATH, 'locale')
    else:
        LOCALE_PATH = None

import kano_i18n.init
kano_i18n.init.install('make-apps', LOCALE_PATH)

from kano_world.functions import get_token

from kano_profile.tracker import Tracker
kanotracker = Tracker()

from kano.utils import run_cmd
from kano.logging import logger
import make_apps.server

from kano.network import is_internet

SERVER_PROC = None
UI_PROC = None


def _kill_subprocess(proc_handle):
    if proc_handle is not None and proc_handle.poll() is None:
        proc_handle.terminate()


def _kill_multiprocessing_process(proc_handle):
    if proc_handle is not None and proc_handle.is_alive():
        proc_handle.terminate()


def _kill_lingering_processes():
    """ Look for processes still attached to the port whose name starts with
    'dbus-' and kill them
    """
    pid_no, dummy, dummy2 = run_cmd(
        "lsof -i :{} | grep 'dbus-' | awk '{{ print $2 }}'"
        .format(make_apps.server.DEFAULT_PORT)
    )
    if pid_no:
        pids = pid_no.splitlines()
        for pid in pids:
            try:
                os.kill(int(pid), signal.SIGTERM)
            except ValueError:
                pass


def _at_exit_hook():
    """ Ensure that the two subprocesses are killed before this process exits
    """
    if SERVER_PROC.is_alive():
        try:
            post(
                'http://localhost:{}/shutdown'.format(
                    make_apps.server.DEFAULT_PORT,
                    timeout=1
                )
            )
        except RequestException:
            pass
    _kill_subprocess(UI_PROC)
    # Give the server subprocess 5 secs to die
    if SERVER_PROC.is_alive():
        SERVER_PROC.join(5)
    # Now kill it anyway
    _kill_multiprocessing_process(SERVER_PROC)
    # Cleanup the lingering processes (usually produced by omxplayer)
    _kill_lingering_processes()
    logger.debug('Goodbye')


# At this point cleaning up just exits. This is triggered once the server
# (which is a child process) notifies us to exit
def cleanup(signum, frame):
    sys.exit(0)

atexit.register(_at_exit_hook)
signal.signal(signal.SIGINT, cleanup)

APP_PID = os.getpid()
# Initialise the local server
SERVER_PROC = multiprocessing.Process(target=make_apps.server.start)

SERVER_PROC.start()


if not is_internet():
    msg = (
        u'kano-dialog title="{title}" '
        u'description="{desc}" '
        u'button="{ok},color:green,return_value:0" '
        u'button="{quit},color:red,return_value:1" '
        u'no-taskbar'
    ).format(
        title=_(u'Oh No'),
        desc=_(u'You need to be connected to the Internet to launch Kano Code. Click on the OK button to set up your WiFi'),
        ok=_(u'OK').upper(),
        quit=_(u'Quit').upper()
    )
    ret, dummy1, dummy2 = run_cmd(msg)

    if "1" == ret.strip():
        sys.exit(0)

    run_cmd('sudo kano-settings wifi', localised=True)

    if not is_internet():
        msg = (
            u'kano-dialog '
            u'title="{title}" '
            u'description="{desc}" '
            u'button="{quit},color:red,return_value:1" '
            u'no-taskbar'
        ).format(
            title=_(u'Oh No'),
            desc=_(u"It looks like something went wrong. Your Kano kit is still not connected to the Internet. Unfortunately Kano Code can\'t be launched offline"),
            quit=_(u'Quit').upper()
        )
        run_cmd(msg)
        sys.exit(0)


# Init the web app
kwargs = {}
if len(sys.argv) > 1:
    kwargs['load_path'] = sys.argv[1]


token = get_token()

if token:
    URL = 'https://world.kano.me/login/{token}?redirect=projects'.format(token=token)
else:
    URL = 'https://world.kano.me/projects'

URL = os.getenv('URL') or URL

# TODO: for when Kano Code can handle the UI without a top bar
# chromium-browser --kiosk URL
cmdline = ['chromium-browser', '--app={}'.format(URL), '--start-maximized']
UI_PROC = subprocess.Popen(cmdline)


# This process is really a factory/watchdog process. It launches the UI and
# server processes as children and makes sure to terminate both once they have
# one of them has been terminated
try:
    while UI_PROC.poll() is None and SERVER_PROC.is_alive():
        time.sleep(3)
    sys.exit(0)
except Exception as exc:
    # the SIGINT handler has executed here
    logger.error('Error while in the main waiting loop: [{}]'.format(exc))
    sys.exit(0)
