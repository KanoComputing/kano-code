(function () {    
    'use strict';

    const pixel_font_letters = {
        'A': [
            [, 1],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, 1, 1],
            [1, , 1],
            [1, , 1],
            [1, , 1]
        ],
        'B': [
            [1, 1, ],
            [1, , 1],
            [1, , 1],
            [1, 1, ],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, 1, 1]
        ],
        'C': [
            [, 1, 1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [, 1, 1]
        ],
        'D': [
            [1, 1],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, 1]
        ],
        'E': [
            [1, 1, 1],
            [1],
            [1],
            [1, 1, 1],
            [1],
            [1],
            [1],
            [1, 1, 1]
        ],
        'F': [
            [1, 1, 1],
            [1],
            [1],
            [1, 1],
            [1],
            [1],
            [1],
            [1]
        ],
        'G': [
            [, 1, 1],
            [1],
            [1],
            [1],
            [1],
            [1, , 1, 1],
            [1, , , 1],
            [, 1, 1]
        ],
        'H': [
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, 1, 1],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, , 1]
        ],
        'I': [
            [1, 1, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [1, 1, 1]
        ],
        'J': [
            [, , 1],
            [, , 1],
            [, , 1],
            [, , 1],
            [, , 1],
            [, , 1],
            [1, , 1],
            [1, 1, 1]
        ],
        'K': [
            [1, , , 1],
            [1, , , 1],
            [1, , 1],
            [1, 1, ],
            [1, , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1]
        ],
        'L': [
            [1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [1, 1, 1]
        ],
        'M': [
            [1, , , , 1],
            [1, 1, , 1, 1],
            [1, , 1, , 1],
            [1, , 1, , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1]
        ],
        'N': [
            [1, , , 1],
            [1, , , 1],
            [1, 1, , 1],
            [1, , 1, 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1]
        ],
        'O': [
            [, 1, 1, ],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [, 1, 1, ]
        ],
        'P': [
            [1, 1, ],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, 1, ],
            [1],
            [1],
            [1]
        ],
        'Q': [
            [0, 1, 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , 1, ],
            [, 1, , 1]
        ],
        'R': [
            [1, 1],
            [1, , 1],
            [1, , 1],
            [1, , 1],
            [1, 1],
            [1, , 1],
            [1, , 1],
            [1, , 1]
        ],
        'S': [
            [, 1, 1],
            [1],
            [1],
            [, 1, ],
            [, , 1],
            [, , 1],
            [1, , 1],
            [, 1, ]
        ],
        'T': [
            [1, 1, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1]
        ],
        'U': [
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [1, , , 1],
            [, 1, 1]
        ],
        'V': [
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [, 1, , 1],
            [, 1, , 1],
            [, , 1]
        ],
        'W': [
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , 1, , 1],
            [1, , 1, , 1],
            [1, 1, , 1, 1],
            [1, , , , 1]
        ],
        'X': [
            [1, , , , 1],
            [1, , , , 1],
            [, 1, , 1],
            [, , 1],
            [, 1, , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1]
        ],
        'Y': [
            [1, , , , 1],
            [1, , , , 1],
            [, 1, , 1],
            [, , 1],
            [, , 1],
            [, , 1],
            [, , 1],
            [, , 1]
        ],
        'Z': [
            [1, 1, 1, 1, 1],
            [, , , , 1],
            [, , , 1],
            [, , 1],
            [, 1],
            [1],
            [1],
            [1, 1, 1, 1, 1]
        ],
        '0': [
            [, 1, 1, 1, ],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [, 1, 1, 1, ]
        ],
        '1': [
            [1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [1]
        ],
        '2': [
            [, 1, 1, 1],
            [1, , , , 1],
            [, , , , 1],
            [, , , 1],
            [, , 1],
            [, 1],
            [1],
            [1, 1, 1, 1, 1]
        ],
        '3': [
            [, 1, 1, 1],
            [1, , , ,1],
            [, , , 1],
            [, , 1],
            [, , , 1],
            [, , , , 1],
            [1, , , , 1],
            [, 1, 1, 1]
        ],
        '4': [
            [1],
            [1],
            [1],
            [1, , , 1],
            [1, , , 1],
            [1, 1, 1, 1, 1],
            [, , , 1],
            [, , , 1]
        ],
        '5': [
            [1, 1, 1, 1, 1],
            [1],
            [1],
            [, 1, 1, 1],
            [, , , , 1],
            [, , , , 1],
            [1, , , , 1],
            [, 1, 1, 1]
        ],
        '6': [
            [, 1, 1, 1],
            [1 , , , , 1],
            [1],
            [1, 1, 1, 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [, 1, 1, 1]
        ],
        '7': [
            [1, 1, 1, 1, 1],
            [, , , , 1],
            [, , , , 1],
            [, , , 1],
            [, , 1],
            [, , 1],
            [, , 1],
            [, , 1]
        ],
        '8': [
            [, 1, 1, 1],
            [1 , , , , 1],
            [1 , , , , 1],
            [, 1, 1, 1],
            [1, , , , 1],
            [1, , , , 1],
            [1, , , , 1],
            [, 1, 1, 1]
        ],
        '9': [
            [, 1, 1, 1],
            [1 , , , , 1],
            [1 , , , , 1],
            [, 1, 1, 1, 1],
            [, , , , 1],
            [, , , , 1],
            [1, , , , 1],
            [, 1, 1, 1]
        ],
        ' ': [
            [, ,],
            [, ,],
            [, ,],
            [, ,],
            [, ,],
            [, ,],
            [, ,],
            [, ,]
        ],
        ':': [
            [ ,],
            [ ,],
            [1,],
            [ ,],
            [ ,],
            [1,],
            [ ,],
            [ ,]
        ],
        ';': [
            [ ,],
            [ ,],
            [1,],
            [ ,],
            [ ,],
            [1,],
            [1,],
            [ ,]
        ],
        '.': [
            [,],
            [,],
            [,],
            [,],
            [,],
            [,],
            [,],
            [1]
        ],
        ',': [
            [,],
            [,],
            [,],
            [,],
            [,],
            [,],
            [1],
            [1]
        ],
        '?': [
            [, 1, ],
            [1, ,1],
            [, ,1],
            [, ,1],
            [, 1],
            [, 1],
            [],
            [, 1]
        ],
        '!': [
            [1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [],
            [1]
        ],
        '&': [
            [, 1, 1, ],
            [1,, , 1, ],
            [1, , , , ],
            [, 1, , ],
            [1, , 1, , 1],
            [1, , , 1, ],
            [1, , , 1, 1],
            [, 1, 1, ,1]
        ],
        '+': [
            [,],
            [,],
            [, 1],
            [1, 1, 1],
            [, 1],
            [,],
            [,],
            [,]
        ],
        '=': [
            [,],
            [,],
            [1, 1, 1],
            [,],
            [1, 1, 1],
            [,],
            [,],
            [,]
        ],
        '-': [
            [, ,],
            [, ,],
            [, ,],
            [1, 1],
            [, ,],
            [, ,],
            [, ,],
            [, ,]
        ],
        'â€“': [
            [, ,],
            [, ,],
            [, ,],
            [1, 1, 1],
            [, ,],
            [, ,],
            [, ,],
            [, ,]
        ],
        '(': [
            [, , 1],
            [, 1,],
            [1],
            [1],
            [1],
            [1],
            [, 1],
            [, , 1]
        ],
        ')': [
            [1],
            [, 1,],
            [, ,1],
            [, ,1],
            [, ,1],
            [, ,1],
            [, 1],
            [1]
        ],
        '{': [
            [, , 1],
            [, 1,],
            [, 1],
            [1],
            [, 1],
            [, 1],
            [, 1],
            [, , 1]
        ],
        '}': [
            [1],
            [, 1,],
            [, 1],
            [, ,1],
            [, 1],
            [, 1],
            [, 1],
            [1]
        ],
        '[': [
            [1, 1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [1],
            [1, 1]
        ],
        ']': [
            [1, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [, 1],
            [1, 1]
        ],
        '/': [
            [, ,1],
            [, ,1],
            [, ,1],
            [,1],
            [,1],
            [1],
            [1],
            [1]
        ],
        '"': [
            [1, ,1],
            [1, ,1],
            [,],
            [,],
            [,],
            [,],
            [,],
            [,]
        ],
        '\'': [
            [1],
            [1],
            [,],
            [,],
            [,],
            [,],
            [,],
            [,]
        ],
        '$': [
            [, 1],
            [, 1, 1],
            [1, ],
            [, 1, ],
            [, , 1],
            [, , 1],
            [1, 1],
            [, 1]
        ],
        'Â£': [
            [, , 1, 1],
            [, 1],
            [, 1],
            [, 1, 1],
            [, 1],
            [, 1],
            [, 1],
            [1, 1, 1, 1]
        ],
        '#': [
            [, 1, ,1],
            [, 1, ,1],
            [1, 1, 1, 1, 1],
            [, 1, ,1],
            [, 1, ,1],
            [1, 1, 1, 1, 1],
            [, 1, ,1],
            [, 1, ,1],
        ],
        '@': [
            [, 1, 1, 1, 1, 1],
            [1, , , , , , 1],
            [1, , 1, 1, , , 1],
            [1, , 1, ,1, , 1],
            [1, , 1, 1, 1, 1],
            [1, , , ,, , ],
            [, 1, 1, 1, 1],
            [,]
        ],
        '%': [
            [1, 1, , , 1],
            [1, 1, , ,1],
            [, , ,1],
            [, ,1],
            [, ,1],
            [, 1],
            [1, , , 1, 1],
            [1, , , 1, 1]
        ],
        '*': [
            [,],
            [,],
            [1, , 1, ,1],
            [, 1, 1,1],
            [1, 1,1, 1, 1],
            [, 1, 1,1],
            [1, ,1, , 1],
            [,]
        ],
        '<': [
            [,],
            [, ,1],
            [,1],
            [1],
            [,1],
            [, ,1],
            [,],
            [,]
        ],
        '>': [
            [,],
            [1],
            [,1],
            [, ,1],
            [,1],
            [1],
            [,],
            [,]
        ],
        '<': [
            [,],
            [, ,1],
            [,1],
            [1],
            [,1],
            [, ,1],
            [,],
            [,]
        ],
        '~': [
            [,],
            [,],
            [, 1, ,1],
            [1, ,1],
            [,],
            [,],
            [,],
            [,]
        ],
    };

    let PixelFont = {
        processText (textString) {
            var needed = [];
            var ss = textString.toUpperCase();
            for (var i = 0; i < ss.length; i++) {
                var letter = pixel_font_letters[ss.charAt(i)];
                if (letter) { // There are letters not in the font array.
                    needed.push(letter);
                }
            }
            
            return needed;
        },
        generateMatrix (textString, fontColor, backgroundColor) {
            var needed = [];
            textString = textString.toUpperCase();
            for (var i = 0; i < textString.length; i++) {
                var letter = pixel_font_letters[textString.charAt(i)];
                if (letter) { // There are letters not in the font array.
                    needed.push(letter);
                }
            }

            let lightsArray = new Array(128).fill(backgroundColor),
                currX = 0;
            for (let x = 0; x < needed.length && currX < 16; x++) {
                let maxWidth = 0;
                for (let i = 0; i < needed[x].length; i++) {
                    for (let j = 0; j < needed[x][i].length; j++) {
                        maxWidth = (needed[x][i].length > maxWidth) ? needed[x][i].length : maxWidth;
                        if ((j + currX) < 16) {
                            lightsArray[(i * 16) + j + currX] = (needed[x][i][j]) ? fontColor : backgroundColor;
                        }
                    }
                }
                currX += maxWidth + 1;
            }
            return lightsArray;    
        }
    }

    window.Kano.PixelFont = Object.assign({}, PixelFont);;

})(window.Kano = window.Kano || {});
